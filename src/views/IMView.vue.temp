<template>
  <div class="im-container">
    <!-- 左侧菜单栏 -->
    <div class="menu-sidebar">
      <!-- 用户头像 -->
      <div class="user-avatar" @click="showUserMenu = true">
        <el-avatar :size="40" :src="userStore.userAvatar" />
      </div>
      
      <!-- 主菜单 -->
      <div class="main-menu">
        <div 
          class="menu-item" 
          :class="{ active: activeMenu === 'chat' }"
          @click="handleMenuSelect('chat')"
        >
          <el-badge :value="unreadCount" :hidden="!unreadCount">
            <el-icon><ChatDotRound /></el-icon>
          </el-badge>
        </div>
        <div 
          class="menu-item" 
          :class="{ active: activeMenu === 'friends' }"
          @click="handleMenuSelect('friends')"
        >
          <el-icon><UserFilled /></el-icon>
        </div>
      </div>

      <!-- 底部菜单 -->
      <div class="bottom-menu">
        <div class="menu-item" @click="showSearchDialog = true">
          <el-icon><Plus /></el-icon>
        </div>
        <div 
          class="menu-item" 
          :class="{ active: activeMenu === 'requests' }"
          @click="handleMenuSelect('requests')"
        >
          <el-badge :value="friendRequests.length" :hidden="!friendRequests.length">
            <el-icon><Bell /></el-icon>
          </el-badge>
        </div>
      </div>
    </div>

    <!-- 列表区域 -->
    <div class="list-sidebar">
      <!-- 搜索框 -->
      <div class="search-box">
        <el-input
          v-model="searchKey"
          placeholder="搜索"
          :prefix-icon="Search"
          clearable
        />
      </div>

      <!-- 聊天列表 -->
      <div v-if="activeMenu === 'chat'" class="chat-list">
        <div
          v-for="chat in chatList"
          :key="chat.id"
          class="chat-item"
          :class="{ active: currentContact?.id === chat.id }"
          @click="selectContact(chat)"
        >
          <el-avatar :size="40" :src="getAvatarUrl(chat.avatar)" />
          <div class="chat-info">
            <div class="chat-header">
              <span class="chat-name">{{ chat.userName }}</span>
              <span class="chat-time">{{ chat.lastTime }}</span>
            </div>
            <div class="chat-message">{{ chat.lastMessage }}</div>
          </div>
        </div>
      </div>

      <!-- 好友列表 -->
      <div v-if="activeMenu === 'friends'" class="friend-list">
        <div
          v-for="friend in friendList"
          :key="friend.id"
          class="friend-item"
          @click="selectContact(friend)"
        >
          <el-avatar :size="40" :src="getAvatarUrl(friend.avatar)" />
          <div class="friend-info">
            <span class="friend-name">{{ friend.userName }}</span>
          </div>
        </div>
      </div>

      <!-- 好友申请列表 -->
      <div v-if="activeMenu === 'requests'" class="request-list">
        <div
          v-for="request in friendRequests"
          :key="request.id"
          class="request-item"
        >
          <el-avatar :size="40" :src="getAvatarUrl(request.from.avatar)" />
          <div class="request-info">
            <div class="request-name">{{ request.from.userName }}</div>
            <div class="request-time">{{ new Date(request.createdAt).toLocaleString() }}</div>
            <div class="request-actions">
              <el-button type="success" size="small" @click="handleAcceptRequest(request)">接受</el-button>
              <el-button type="danger" size="small" @click="handleRejectRequest(request)">拒绝</el-button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 聊天区域 -->
    <div class="chat-area" v-if="currentContact">
      <!-- 聊天头部 -->
      <div class="chat-header">
        <span class="contact-name">{{ currentContact.userName }}</span>
      </div>

      <!-- 消息列表 -->
      <div class="message-list" ref="messageList">
        <div
          v-for="message in messages"
          :key="message.id"
          class="message-item"
          :class="{ 'message-self': message.isSelf }"
        >
          <el-avatar 
            :size="30" 
            :src="message.isSelf ? userStore.userAvatar : getAvatarUrl(currentContact.avatar)"
          />
          <div class="message-content">{{ message.content }}</div>
        </div>
      </div>

      <!-- 输入区域 -->
      <div class="input-area">
        <div class="toolbar">
          <el-icon><ChatRound /></el-icon>
          <el-icon><Document /></el-icon>
          <el-icon><FolderOpened /></el-icon>
        </div>
        <div class="input-box">
          <el-input
            v-model="messageInput"
            type="textarea"
            :rows="3"
            placeholder="输入消息..."
            resize="none"
            @keyup.enter.exact="sendMessage"
          />
          <el-button type="primary" @click="sendMessage">发送</el-button>
        </div>
      </div>
    </div>

    <div v-else class="no-chat">
      <el-empty description="选择一个聊天" />
    </div>

    <!-- 搜索用户对话框 -->
    <el-dialog
      v-model="showSearchDialog"
      title="添加好友"
      width="400px"
      :close-on-click-modal="false"
    >
      <div class="search-container">
        <el-input
          v-model="searchUsername"
          placeholder="请输入用户名"
          clearable
          @keyup.enter="searchUser"
        >
          <template #append>
            <el-button @click="searchUser">搜索</el-button>
          </template>
        </el-input>

        <!-- 搜索结果 -->
        <div v-if="searchResult" class="search-result">
          <div class="user-card">
            <el-avatar :size="40" :src="getAvatarUrl(searchResult.avatar)" />
            <div class="user-info">
              <div class="username">{{ searchResult.userName }}</div>
            </div>
            <el-button type="primary" @click="addFriend" :loading="addingFriend">
              添加好友
            </el-button>
          </div>
        </div>
      </div>
    </el-dialog>
  </div>
</template>

<script setup>
import { ref, onMounted, watch } from 'vue'
import { useRouter } from 'vue-router'
import { 
  ArrowLeft, 
  Plus, 
  ChatDotRound,
  UserFilled,
  Bell,
  Search,
  ChatRound,
  Document,
  FolderOpened
} from '@element-plus/icons-vue'
import { ElMessage } from 'element-plus'
import defaultAvatar from '../assets/avatar.jpg'
import { useUserStore } from '../stores/user'
import { request } from '../utils/request'
import { API_ENDPOINTS, API_BASE_URL } from '../config'

const router = useRouter()
const userStore = useUserStore()
const messageInput = ref('')
const currentContact = ref(null)
const messageList = ref(null)
const isMobileView = ref(window.innerWidth <= 768)
const showChat = ref(false)
const contacts = ref([])  // 清空默认联系人
const messages = ref([])  // 清空默认消息

// 搜索相关
const showSearchDialog = ref(false)
const searchUsername = ref('')
const searchResult = ref(null)
const addingFriend = ref(false)

// 新增的状态
const activeMenu = ref('chat')
const chatList = ref([])
const friendList = ref([])
const friendRequests = ref([])
const searchKey = ref('')
const unreadCount = ref(0)

// 计算搜索结果用户的头像URL
const getAvatarUrl = (avatar) => {
  if (!avatar) return defaultAvatar
  return avatar.startsWith('http') ? avatar : `${API_BASE_URL}${avatar}`
}

// 搜索用户
const searchUser = async () => {
  if (!searchUsername.value) {
    ElMessage.warning('请输入用户名')
    return
  }

  try {
    // 创建 FormData
    const formData = new FormData()
    formData.append('user_name', searchUsername.value)

    const response = await request(API_ENDPOINTS.SEARCH_USER, {
      method: 'POST',
      // 不设置 Content-Type，让浏览器自动设置
      headers: {},
      body: formData
    })

    if (response.status === 200) {
      searchResult.value = response.data
    } else {
      searchResult.value = null
      ElMessage.warning(response.msg || '用户不存在')
    }
  } catch (error) {
    console.error('Search user failed:', error)
    ElMessage.error('搜索失败，请重试')
  }
}

// 添加好友
const addFriend = async () => {
  if (!searchResult.value) return

  addingFriend.value = true
  try {
    // 创建 FormData
    const formData = new FormData()
    formData.append('friend_id', searchResult.value.id)

    const response = await request(API_ENDPOINTS.ADD_FRIEND, {
      method: 'POST',
      headers: {},  // 不设置 Content-Type，让浏览器自动设置
      body: formData
    })

    if (response.status === 200) {
      ElMessage.success(response.msg || "好友申请已提交！")
      showSearchDialog.value = false
      // TODO: 刷新好友列表
    } else {
      ElMessage.error(response.msg || '添加好友失败')
    }
  } catch (error) {
    console.error('Add friend failed:', error)
    ElMessage.error('添加好友失败，请重试')
  } finally {
    addingFriend.value = false
  }
}

// 监听窗口大小变化
window.addEventListener('resize', () => {
  isMobileView.value = window.innerWidth <= 768
})

// 监听消息列表变化，自动滚动到底部
watch(() => messages.value.length, () => {
  setTimeout(() => {
    if (messageList.value) {
      messageList.value.scrollTop = messageList.value.scrollHeight
    }
  }, 100)
})

const selectContact = (contact) => {
  currentContact.value = contact
  if (isMobileView.value) {
    showChat.value = true
  }
  // 这里应该加载与该联系人的聊天记录
}

const backToContacts = () => {
  showChat.value = false
}

const sendMessage = () => {
  if (!messageInput.value.trim()) return
  
  messages.value.push({
    id: Date.now(),
    content: messageInput.value,
    isSelf: true,
    avatar: userStore.userAvatar
  })
  
  messageInput.value = ''
}

// 处理菜单选择
const handleMenuSelect = (key) => {
  activeMenu.value = key
  if (key === 'friends') {
    loadFriendList()
  } else if (key === 'requests') {
    loadFriendRequests()
  }
}

// 加载好友列表
const loadFriendList = async () => {
  try {
    const response = await request(API_ENDPOINTS.GET_FRIENDS)
    if (response.status === 200) {
      friendList.value = response.data
    }
  } catch (error) {
    console.error('Load friend list failed:', error)
    ElMessage.error('加载好友列表失败')
  }
}

// 加载好友申请
const loadFriendRequests = async () => {
  try {
    const response = await request(API_ENDPOINTS.GET_FRIEND_REQUESTS)
    if (response.status === 200) {
      friendRequests.value = response.data
    }
  } catch (error) {
    console.error('Load friend requests failed:', error)
    ElMessage.error('加载好友申请失败')
  }
}

// 处理好友申请
const handleAcceptRequest = async (request) => {
  try {
    const formData = new FormData()
    formData.append('request_id', request.id)
    formData.append('action', 'accept')

    const response = await request(API_ENDPOINTS.HANDLE_FRIEND_REQUEST, {
      method: 'POST',
      headers: {},
      body: formData
    })

    if (response.status === 200) {
      ElMessage.success('已接受好友申请')
      loadFriendRequests()  // 重新加载申请列表
      loadFriendList()      // 重新加载好友列表
    } else {
      ElMessage.error(response.msg || '处理好友申请失败')
    }
  } catch (error) {
    console.error('Handle friend request failed:', error)
    ElMessage.error('处理好友申请失败')
  }
}

const handleRejectRequest = async (request) => {
  try {
    const formData = new FormData()
    formData.append('request_id', request.id)
    formData.append('action', 'reject')

    const response = await request(API_ENDPOINTS.HANDLE_FRIEND_REQUEST, {
      method: 'POST',
      headers: {},
      body: formData
    })

    if (response.status === 200) {
      ElMessage.success('已拒绝好友申请')
      loadFriendRequests()  // 重新加载申请列表
    } else {
      ElMessage.error(response.msg || '处理好友申请失败')
    }
  } catch (error) {
    console.error('Handle friend request failed:', error)
    ElMessage.error('处理好友申请失败')
  }
}

onMounted(async () => {
  if (!userStore.isLoggedIn) {
    router.push('/login')
    return
  }
  
  await userStore.loadUserAvatar()
  await loadFriendList()
  await loadFriendRequests()
})
</script>

<style scoped>
.im-container {
  height: 100vh;
  width: 100vw;
  display: flex;
  background-color: #f5f5f5;
}

/* 左侧菜单栏 */
.menu-sidebar {
  width: 60px;
  background-color: #2e2e2e;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px 0;
}

.user-avatar {
  margin-bottom: 20px;
  cursor: pointer;
}

.main-menu {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 10px;
  width: 100%;
}

.bottom-menu {
  display: flex;
  flex-direction: column;
  gap: 10px;
  width: 100%;
}

.menu-item {
  height: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  color: #888;
  font-size: 20px;
}

.menu-item:hover {
  background-color: #3e3e3e;
}

.menu-item.active {
  color: #07c160;
  background-color: #3e3e3e;
}

/* 列表区域 */
.list-sidebar {
  width: 250px;
  background-color: #fff;
  border-right: 1px solid #eee;
  display: flex;
  flex-direction: column;
}

.search-box {
  padding: 10px;
  border-bottom: 1px solid #eee;
}

.chat-list, .friend-list, .request-list {
  flex: 1;
  overflow-y: auto;
}

.chat-item, .friend-item, .request-item {
  padding: 12px;
  display: flex;
  align-items: center;
  gap: 10px;
  cursor: pointer;
}

.chat-item:hover, .friend-item:hover {
  background-color: #f5f5f5;
}

.chat-item.active {
  background-color: #eee;
}

.chat-info {
  flex: 1;
  min-width: 0;
}

.chat-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 4px;
}

.chat-name {
  font-weight: 500;
  color: #333;
}

.chat-time {
  font-size: 12px;
  color: #999;
}

.chat-message {
  font-size: 13px;
  color: #999;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* 聊天区域 */
.chat-area {
  flex: 1;
  display: flex;
  flex-direction: column;
  background-color: #f5f5f5;
}

.chat-header {
  height: 60px;
  padding: 0 20px;
  display: flex;
  align-items: center;
  background-color: #fff;
  border-bottom: 1px solid #eee;
}

.contact-name {
  font-size: 16px;
  font-weight: 500;
}

.message-list {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.message-item {
  display: flex;
  align-items: flex-start;
  gap: 10px;
  max-width: 70%;
}

.message-self {
  flex-direction: row-reverse;
  align-self: flex-end;
}

.message-content {
  padding: 10px 15px;
  background-color: #fff;
  border-radius: 4px;
  font-size: 14px;
  line-height: 1.4;
  word-break: break-word;
}

.message-self .message-content {
  background-color: #95ec69;
}

.input-area {
  background-color: #fff;
  border-top: 1px solid #eee;
}

.toolbar {
  padding: 10px;
  display: flex;
  gap: 15px;
  color: #666;
  font-size: 20px;
}

.toolbar .el-icon {
  cursor: pointer;
}

.toolbar .el-icon:hover {
  color: #07c160;
}

.input-box {
  padding: 10px;
  display: flex;
  gap: 10px;
}

.input-box .el-button {
  align-self: flex-end;
}

.no-chat {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #fff;
}

/* 搜索结果样式 */
.search-container {
  padding: 20px 0;
}

.search-result {
  margin-top: 20px;
}

.user-card {
  display: flex;
  align-items: center;
  padding: 15px;
  background-color: #f5f5f5;
  border-radius: 8px;
  gap: 15px;
}

.user-card .user-info {
  flex: 1;
}

.user-card .username {
  font-weight: 500;
}

/* 好友请求样式 */
.request-item {
  padding: 15px;
  display: flex;
  align-items: flex-start;
  gap: 15px;
  border-bottom: 1px solid #eee;
}

.request-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.request-name {
  font-weight: 500;
  color: #333;
}

.request-time {
  font-size: 12px;
  color: #999;
}

.request-actions {
  display: flex;
  gap: 10px;
  margin-top: 5px;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .menu-sidebar {
    width: 50px;
  }

  .list-sidebar {
    width: 200px;
  }
}
</style> 